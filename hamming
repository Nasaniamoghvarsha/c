import java.util.Scanner;

public class HammingCode {
    // Method to encode data using Hamming Code
    public static int[] encode(int[] data) {
        int[] encoded = new int[7];
        encoded[2] = data[0];
        encoded[4] = data[1];
        encoded[5] = data[2];
        encoded[6] = data[3];

        // Calculate parity bits
        encoded[0] = encoded[2] ^ encoded[4] ^ encoded[6]; // p1
        encoded[1] = encoded[2] ^ encoded[5] ^ encoded[6]; // p2
        encoded[3] = encoded[4] ^ encoded[5] ^ encoded[6]; // p3

        return encoded;
    }

    // Method to decode data and correct single-bit errors
    public static int[] decode(int[] encoded) {
        // Calculate parity checks
        int p1 = encoded[0] ^ encoded[2] ^ encoded[4] ^ encoded[6];
        int p2 = encoded[1] ^ encoded[2] ^ encoded[5] ^ encoded[6];
        int p3 = encoded[3] ^ encoded[4] ^ encoded[5] ^ encoded[6];
        
        // Determine the position of the error
        int errorPosition = p1 * 1 + p2 * 2 + p3 * 4;

        // Correct the error if one is detected
        if (errorPosition != 0) {
            System.out.println("Error detected at position: " + errorPosition);
            encoded[errorPosition - 1] = encoded[errorPosition - 1] == 0 ? 1 : 0; // Flip the bit
            System.out.println("Error corrected.");
        } else {
            System.out.println("No error detected.");
        }

        // Extract original data bits
        int[] data = {encoded[2], encoded[4], encoded[5], encoded[6]};
        return data;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input data bits dynamically
        System.out.println("Enter 4 data bits (space-separated): ");
        int[] data = new int[4];
        for (int i = 0; i < 4; i++) {
            data[i] = sc.nextInt();
            if (data[i] != 0 && data[i] != 1) {
                System.out.println("Invalid input! Please enter 0 or 1.");
                return;
            }
        }

        // Encode the data
        int[] encodedData = encode(data);

        // Display encoded data
        System.out.print("Encoded data: ");
        for (int bit : encodedData) {
            System.out.print(bit + " ");
        }
        System.out.println();

        // Simulate an error in encoded data
        System.out.println("Enter the position to introduce an error (1-7, or 0 for no error): ");
        int errorPosition = sc.nextInt();
        if (errorPosition > 0 && errorPosition <= 7) {
            encodedData[errorPosition - 1] = encodedData[errorPosition - 1] == 0 ? 1 : 0;
            System.out.println("Error introduced at position: " + errorPosition);
        }

        // Decode the data
        int[] decodedData = decode(encodedData);

        // Display decoded data
        System.out.print("Decoded data: ");
        for (int bit : decodedData) {
            System.out.print(bit + " ");
        }
        System.out.println();

        sc.close();
    }
}
